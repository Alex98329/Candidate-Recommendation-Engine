# -*- coding: utf-8 -*-
"""app_cv

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rYSHBe2rShxWGNrn6OAGh5Wk1Vgaw0ZE
"""
"""Alexander Sandoval"""
#Libraries

import streamlit as st
from sentence_transformers import SentenceTransformer, util
import openai
import os
import tempfile

# OpenAI (optional bonus feature)
openai.api_key = st.secrets.get("OPENAI_API_KEY", os.getenv("OPENAI_API_KEY"))

# Load embedding model
@st.cache_resource
def load_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

model = load_model()

# App UI
st.title("Candidate Recommendation Engine")
st.markdown("Input a job description and upload resumes. Get the top-matching candidates.")

# Job description input
job_description = st.text_area("Job Description", height=200)

# Resume file upload
uploaded_files = st.file_uploader("Upload Candidate Resumes (TXT or PDF)", type=["txt", "pdf"], accept_multiple_files=True)
# Resume Text

# Max candidates to return
top_k = st.slider("Showing Top Candidates", min_value=1, max_value=10, value=5)


# --- Extract text from uploaded files ---
def extract_text(file):
    if file.type == "application/pdf":
        from PyPDF2 import PdfReader
        pdf = PdfReader(file)
        return "\n".join([page.extract_text() or "" for page in pdf.pages])
    else:
        return file.read().decode("utf-8", errors="ignore")

# extract a candidate's name
def extract_name(resume_text):
    lines = resume_text.strip().split("\n")
    for line in lines:
        if line.strip():
            return line.strip()
    return " "



# Generate summary with OpenAI
def generate_summary(job, resume):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a technical recruiter."},
                {"role": "user", "content": f"Job: {job}\nResume: {resume}\nWhy is this person a good fit?"}
            ],
            max_tokens=200
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"Summary not generated: {e}"



# Run comparison
# Charge the job description
if st.button("Find Best Candidates") and job_description and uploaded_files:
    job_embedding = model.encode(job_description, convert_to_tensor=True)
    results = []

    # Charge the candidate's resume
    for file in uploaded_files:
        resume_text = extract_text(file)
        resume_embedding = model.encode(resume_text, convert_to_tensor=True)
                
        # Perform cosine similarity with embeddings 
        similarity = util.pytorch_cos_sim(job_embedding, resume_embedding).item()

        summary = generate_summary(job_description, resume_text[:2000]) if openai.api_key else "—"
        candidate_name = extract_name(resume_text)
        results.append({
            "file_name": file.name,
            "candidate_name": candidate_name,
            "score": round(similarity * 100, 2),
            "summary": summary
        })

    sorted_results = sorted(results, key=lambda x: x["score"], reverse=True)[:top_k]

    st.subheader("Top Matches")
    for res in sorted_results:
        st.markdown(f"**{res['candidate_name']}** — Similarity: `{res['score']}%`  *({res['file_name']})*   ")
        if openai.api_key:
            with st.expander("Why this candidate?"):
                st.markdown(res['summary'])
elif not uploaded_files:
    st.warning("Please upload at least one resume.")
